// –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π –≤–æ –≤—Å–µ HTML —Ñ–∞–π–ª—ã

const fs = require('fs');
const path = require('path');

// CSS —Ñ–∞–π–ª –º–æ–±–∏–ª—å–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
const mobileCSS = `    <link rel="stylesheet" href="mobile-enhancements.css">`;

// JavaScript —Ñ–∞–π–ª –º–æ–±–∏–ª—å–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
const mobileJS = `    <script src="scripts/mobile-enhancements.js"></script>`;

// –°–ø–∏—Å–æ–∫ HTML —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
const htmlFiles = [
    'crewlife.html',
    'dashboard.html',
    'login.html',
    'register.html',
    'profile.html',
    'requests.html',
    'calendar.html',
    'help.html',
    'flight-booking.html'
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è HTML —Ñ–∞–π–ª–∞
function updateHtmlFile(filePath) {
    try {
        let content = fs.readFileSync(filePath, 'utf8');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –º–æ–±–∏–ª—å–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è
        if (content.includes('mobile-enhancements.css')) {
            console.log(`–ú–æ–±–∏–ª—å–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ ${filePath}`);
            return;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º CSS –º–æ–±–∏–ª—å–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π –ø–æ—Å–ª–µ accessibility.css
        if (content.includes('accessibility.css')) {
            content = content.replace(
                /<link rel="stylesheet" href="accessibility\.css">/,
                `<link rel="stylesheet" href="accessibility.css">\n${mobileCSS}`
            );
        } else {
            // –ï—Å–ª–∏ accessibility.css –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ CSS —Ñ–∞–π–ª–∞
            const cssRegex = /<link rel="stylesheet" href="[^"]+\.css">/g;
            const cssMatches = content.match(cssRegex);
            if (cssMatches && cssMatches.length > 0) {
                const lastCss = cssMatches[cssMatches.length - 1];
                content = content.replace(lastCss, `${lastCss}\n${mobileCSS}`);
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º mobile-enhancements.js –ø–æ—Å–ª–µ accessibility.js
        if (content.includes('accessibility.js')) {
            content = content.replace(
                /<script src="scripts/accessibility\.js"><\/script>/,
                `<script src="scripts/accessibility.js"></script>\n${mobileJS}`
            );
        } else {
            // –ï—Å–ª–∏ accessibility.js –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ JS —Ñ–∞–π–ª–∞
            const jsRegex = /<script src="[^"]+\.js"><\/script>/g;
            const jsMatches = content.match(jsRegex);
            if (jsMatches && jsMatches.length > 0) {
                const lastJs = jsMatches[jsMatches.length - 1];
                content = content.replace(lastJs, `${lastJs}\n${mobileJS}`);
            }
        }
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        fs.writeFileSync(filePath, content, 'utf8');
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω ${filePath}`);
        
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${filePath}:`, error.message);
    }
}

// –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ HTML —Ñ–∞–π–ª—ã
console.log('üì± –ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ–±–∏–ª—å–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π...\n');

htmlFiles.forEach(file => {
    const filePath = path.join(__dirname, file);
    if (fs.existsSync(filePath)) {
        updateHtmlFile(filePath);
    } else {
        console.log(`‚ö†Ô∏è  –§–∞–π–ª ${file} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
});

console.log('\n‚ú® –ú–æ–±–∏–ª—å–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã!');
