#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∫–ª–∞—Å—Ç–µ—Ä–∞ CrewLife

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${BLUE}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
    exit 1
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    if ! command -v docker &> /dev/null; then
        error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
    
    success "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
stop_existing() {
    log "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    docker-compose -f docker-compose.simple.yml down 2>/dev/null || true
    success "–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤
build_images() {
    log "üèóÔ∏è –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤..."
    
    # –ö–æ–ø–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π Dockerfile
    cp Dockerfile.simple Dockerfile
    
    docker-compose -f docker-compose.simple.yml build --no-cache
    success "–û–±—Ä–∞–∑—ã —Å–æ–±—Ä–∞–Ω—ã"
}

# –ó–∞–ø—É—Å–∫ –∫–ª–∞—Å—Ç–µ—Ä–∞
start_cluster() {
    log "üöÄ –ó–∞–ø—É—Å–∫ –∫–ª–∞—Å—Ç–µ—Ä–∞ CrewLife..."
    
    docker-compose -f docker-compose.simple.yml up -d
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
    log "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    sleep 30
    
    success "–ö–ª–∞—Å—Ç–µ—Ä –∑–∞–ø—É—â–µ–Ω"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤
check_services_health() {
    log "üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    services=(
        "mariadb:3306"
        "redis:6379"
        "crewlife-app:5000"
        "nginx:80"
        "crewlife-web-monitor:5001"
        "prometheus:9090"
        "grafana:3000"
    )
    
    for service in "${services[@]}"; do
        name=$(echo $service | cut -d: -f1)
        port=$(echo $service | cut -d: -f2)
        
        if docker-compose -f docker-compose.simple.yml ps | grep -q "$name.*Up"; then
            success "‚úÖ $name –∑–∞–ø—É—â–µ–Ω"
        else
            warning "‚ö†Ô∏è $name –Ω–µ –∑–∞–ø—É—â–µ–Ω"
        fi
    done
}

# –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–µ
show_access_info() {
    log "üåê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–µ:"
    echo ""
    echo "üì± –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:"
    echo "   HTTP:  http://localhost"
    echo "   HTTPS: https://localhost"
    echo ""
    echo "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:"
    echo "   –í–µ–±-–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ë–î: http://localhost:5001"
    echo "   Prometheus:        http://localhost:9090"
    echo "   Grafana:           http://localhost:3000 (admin/admin123)"
    echo ""
    echo "üîß API Endpoints:"
    echo "   Health Check:      http://localhost/health"
    echo "   API Stats:         http://localhost/api/stats"
    echo "   Monitor API:       http://localhost:5001/api/stats"
    echo "   Excel Export:      http://localhost:5001/api/export/excel"
    echo ""
    echo "üìã –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
    echo "   –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:   docker-compose -f docker-compose.simple.yml ps"
    echo "   –õ–æ–≥–∏:              docker-compose -f docker-compose.simple.yml logs -f"
    echo "   –û—Å—Ç–∞–Ω–æ–≤–∫–∞:         docker-compose -f docker-compose.simple.yml down"
    echo "   –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫:        docker-compose -f docker-compose.simple.yml restart"
    echo ""
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    log "üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–∞ CrewLife"
    
    check_dependencies
    stop_existing
    build_images
    start_cluster
    check_services_health
    show_access_info
    
    success "üéâ –ö–ª–∞—Å—Ç–µ—Ä CrewLife —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!"
    log "–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
case "${1:-start}" in
    start)
        main
        ;;
    stop)
        log "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª–∞—Å—Ç–µ—Ä–∞..."
        docker-compose -f docker-compose.simple.yml down
        success "–ö–ª–∞—Å—Ç–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        ;;
    restart)
        log "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–ª–∞—Å—Ç–µ—Ä–∞..."
        docker-compose -f docker-compose.simple.yml restart
        success "–ö–ª–∞—Å—Ç–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω"
        ;;
    status)
        log "üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:"
        docker-compose -f docker-compose.simple.yml ps
        ;;
    logs)
        docker-compose -f docker-compose.simple.yml logs -f
        ;;
    *)
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 {start|stop|restart|status|logs}"
        exit 1
        ;;
esac
