#!/usr/bin/env python3
"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö MariaDB –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
"""

import subprocess
import time
import json
import os
from datetime import datetime

class DatabaseMonitor:
    def __init__(self):
        self.db_config = {
            'user': 'crewlife_user',
            'password': 'andrei8002012',
            'database': 'crewlife_prod'
        }
    
    def run_mysql_query(self, query):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–∞"""
        try:
            cmd = f"mysql -u {self.db_config['user']} -p{self.db_config['password']} {self.db_config['database']} -e \"{query}\""
            result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
            if result.returncode == 0:
                return result.stdout.strip()
            else:
                return f"–û—à–∏–±–∫–∞: {result.stderr}"
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}"
    
    def get_database_stats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        stats = {}
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_result = self.run_mysql_query("SELECT COUNT(*) FROM users WHERE is_active = 1")
        stats['active_users'] = users_result.split('\n')[-1] if users_result else "0"
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫
        requests_result = self.run_mysql_query("SELECT COUNT(*) FROM requests")
        stats['total_requests'] = requests_result.split('\n')[-1] if requests_result else "0"
        
        # –ó–∞—è–≤–∫–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        pending_result = self.run_mysql_query("SELECT COUNT(*) FROM requests WHERE status = 'pending'")
        stats['pending_requests'] = pending_result.split('\n')[-1] if pending_result else "0"
        
        # –†–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        size_result = self.run_mysql_query("SELECT ROUND(SUM(data_length + index_length) / 1024 / 1024, 2) AS 'DB Size in MB' FROM information_schema.tables WHERE table_schema = 'crewlife_prod'")
        stats['db_size_mb'] = size_result.split('\n')[-1] if size_result else "0"
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏
        logs_result = self.run_mysql_query("SELECT action, details, created_at FROM logs ORDER BY created_at DESC LIMIT 5")
        stats['recent_logs'] = logs_result if logs_result else "–ù–µ—Ç –ª–æ–≥–æ–≤"
        
        return stats
    
    def get_connection_info(self):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è—Ö"""
        connections_result = self.run_mysql_query("SHOW PROCESSLIST")
        return connections_result if connections_result else "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"
    
    def get_table_info(self):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞–±–ª–∏—Ü–∞—Ö"""
        tables_result = self.run_mysql_query("SHOW TABLE STATUS")
        return tables_result if tables_result else "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–±–ª–∏—Ü–∞—Ö"
    
    def monitor_loop(self, interval=5):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        print("üîç –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
        print("=" * 60)
        print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        print("=" * 60)
        
        try:
            while True:
                # –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω
                os.system('clear')
                
                print(f"üìä –ú–û–ù–ò–¢–û–†–ò–ù–ì –ë–ê–ó–´ –î–ê–ù–ù–´–• - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
                print("=" * 60)
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                stats = self.get_database_stats()
                
                print("üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
                print(f"   üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['active_users']}")
                print(f"   üìù –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {stats['total_requests']}")
                print(f"   ‚è≥ –ó–∞—è–≤–æ–∫ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {stats['pending_requests']}")
                print(f"   üíæ –†–∞–∑–º–µ—Ä –ë–î: {stats['db_size_mb']} MB")
                
                print("\nüìã –ü–û–°–õ–ï–î–ù–ò–ï –î–ï–ô–°–¢–í–ò–Ø:")
                if stats['recent_logs'] != "–ù–µ—Ç –ª–æ–≥–æ–≤":
                    logs_lines = stats['recent_logs'].split('\n')[1:6]  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    for log in logs_lines:
                        if log.strip():
                            print(f"   {log}")
                else:
                    print("   –ù–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏—Ö –ª–æ–≥–æ–≤")
                
                print("\nüîó –ê–ö–¢–ò–í–ù–´–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø:")
                connections = self.get_connection_info()
                if connections != "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π":
                    conn_lines = connections.split('\n')[1:4]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                    for conn in conn_lines:
                        if conn.strip():
                            print(f"   {conn}")
                else:
                    print("   –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π")
                
                print(f"\n‚è±Ô∏è  –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ {interval} —Å–µ–∫—É–Ω–¥...")
                print("=" * 60)
                
                time.sleep(interval)
                
        except KeyboardInterrupt:
            print("\n\nüõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def export_stats(self, filename=None):
        """–≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ JSON"""
        if not filename:
            filename = f"db_stats_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        stats = self.get_database_stats()
        stats['timestamp'] = datetime.now().isoformat()
        
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(stats, f, ensure_ascii=False, indent=2)
            print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ {filename}")
            return filename
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
            return None

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    monitor = DatabaseMonitor()
    
    print("üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö CrewLife")
    print("=" * 40)
    print("1. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
    print("2. –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    print("3. –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    print("4. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞–±–ª–∏—Ü–∞—Ö")
    print("5. –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
    print("=" * 40)
    
    choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (1-5): ").strip()
    
    if choice == "1":
        interval = input("–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5): ").strip()
        try:
            interval = int(interval) if interval else 5
        except ValueError:
            interval = 5
        monitor.monitor_loop(interval)
    
    elif choice == "2":
        stats = monitor.get_database_stats()
        print("\nüìä –¢–ï–ö–£–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print("=" * 30)
        for key, value in stats.items():
            if key != 'recent_logs':
                print(f"{key}: {value}")
    
    elif choice == "3":
        filename = monitor.export_stats()
        if filename:
            print(f"üìÅ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
    
    elif choice == "4":
        print("\nüìã –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –¢–ê–ë–õ–ò–¶–ê–•:")
        print("=" * 40)
        table_info = monitor.get_table_info()
        print(table_info)
    
    elif choice == "5":
        print("\nüîó –ê–ö–¢–ò–í–ù–´–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø:")
        print("=" * 40)
        connections = monitor.get_connection_info()
        print(connections)
    
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

if __name__ == "__main__":
    main()
