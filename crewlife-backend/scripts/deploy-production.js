#!/usr/bin/env node

const mysql = require('mysql2/promise');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

async function deployToProduction() {
  console.log('üöÄ –î–µ–ø–ª–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω...');
  
  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø—Ä–æ–¥–∞–∫—à–Ω –ë–î
  const config = {
    host: process.env.DB_HOST || '127.0.0.1',
    port: process.env.DB_PORT || 3306,
    user: process.env.DB_USER || 'crewlife_user',
    password: process.env.DB_PASSWORD || 'andrei8002012',
    database: process.env.DB_NAME || 'crewlife_prod',
    charset: 'utf8mb4'
  };

  let connection;
  
  try {
    console.log('üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–æ–¥–∞–∫—à–Ω MariaDB...');
    connection = await mysql.createConnection(config);
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–æ–¥–∞–∫—à–Ω –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü...');
    const [existingTables] = await connection.execute('SHOW TABLES');
    const tableNames = existingTables.map(table => Object.values(table)[0]);
    
    if (tableNames.length > 0) {
      console.log('‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã:');
      tableNames.forEach(table => console.log(`   - ${table}`));
      
      // –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
      console.log('üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...');
      const backupFile = `backup_${new Date().toISOString().replace(/[:.]/g, '-')}.sql`;
      const backupPath = path.join(__dirname, '..', 'backups', backupFile);
      
      // –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –±—ç–∫–∞–ø–æ–≤
      const backupDir = path.dirname(backupPath);
      if (!fs.existsSync(backupDir)) {
        fs.mkdirSync(backupDir, { recursive: true });
      }
      
      // –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
      const { exec } = require('child_process');
      const mysqldumpCmd = `mysqldump -h ${config.host} -P ${config.port} -u ${config.user} -p${config.password} ${config.database} > ${backupPath}`;
      
      await new Promise((resolve, reject) => {
        exec(mysqldumpCmd, (error, stdout, stderr) => {
          if (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞:', error.message);
            reject(error);
          } else {
            console.log(`‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${backupPath}`);
            resolve();
          }
        });
      });
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('üë§ –°–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users...');
    await connection.execute(`
      CREATE TABLE IF NOT EXISTS users (
        id VARCHAR(36) PRIMARY KEY DEFAULT (UUID()),
        employee_id VARCHAR(50) UNIQUE NOT NULL COMMENT '–¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä',
        full_name VARCHAR(255) NOT NULL COMMENT '–§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é',
        password VARCHAR(255) NOT NULL COMMENT '–•–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å',
        position VARCHAR(100) NOT NULL COMMENT '–î–æ–ª–∂–Ω–æ—Å—Ç—å',
        location VARCHAR(100) NOT NULL COMMENT '–õ–æ–∫–∞—Ü–∏—è',
        is_active BOOLEAN DEFAULT TRUE COMMENT '–ê–∫—Ç–∏–≤–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP COMMENT '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è',
        last_login TIMESTAMP NULL COMMENT '–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥',
        
        INDEX idx_employee_id (employee_id),
        INDEX idx_full_name (full_name),
        INDEX idx_position (position),
        INDEX idx_location (location),
        INDEX idx_is_active (is_active),
        INDEX idx_created_at (created_at)
      ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='–¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–∏—Å—Ç–µ–º—ã'
    `);
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ users –≥–æ—Ç–æ–≤–∞');

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∑–∞—è–≤–æ–∫ –Ω–∞ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã
    console.log('‚úàÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã flight_orders...');
    await connection.execute(`
      CREATE TABLE IF NOT EXISTS flight_orders (
        id VARCHAR(36) PRIMARY KEY DEFAULT (UUID()),
        order_number VARCHAR(50) UNIQUE NOT NULL COMMENT '–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏',
        user_id VARCHAR(36) NOT NULL COMMENT 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        employee_id VARCHAR(50) NOT NULL COMMENT '–¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä',
        full_name VARCHAR(255) NOT NULL COMMENT '–§–ò–û',
        
        departure_city VARCHAR(100) NOT NULL COMMENT '–ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
        arrival_city VARCHAR(100) NOT NULL COMMENT '–ì–æ—Ä–æ–¥ –ø—Ä–∏–±—ã—Ç–∏—è',
        departure_date DATE NOT NULL COMMENT '–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
        departure_time TIME NOT NULL COMMENT '–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
        arrival_date DATE NOT NULL COMMENT '–î–∞—Ç–∞ –ø—Ä–∏–±—ã—Ç–∏—è',
        arrival_time TIME NOT NULL COMMENT '–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è',
        flight_number VARCHAR(20) NULL COMMENT '–ù–æ–º–µ—Ä —Ä–µ–π—Å–∞',
        airline VARCHAR(100) NULL COMMENT '–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è',
        
        purpose TEXT NULL COMMENT '–¶–µ–ª—å –ø–æ–µ–∑–¥–∫–∏',
        priority ENUM('LOW', 'MEDIUM', 'HIGH', 'URGENT') DEFAULT 'MEDIUM' COMMENT '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç',
        passengers INT DEFAULT 1 COMMENT '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤',
        luggage_info TEXT NULL COMMENT '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–≥–∞–∂–µ',
        special_requests TEXT NULL COMMENT '–û—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è',
        
        status ENUM('NEW', 'PROCESSING', 'CONFIRMED', 'REJECTED', 'COMPLETED', 'CANCELLED') DEFAULT 'NEW' COMMENT '–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏',
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP COMMENT '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è',
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è',
        processed_by VARCHAR(36) NULL COMMENT 'ID –æ–±—Ä–∞–±–æ—Ç–∞–≤—à–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
        processed_at TIMESTAMP NULL COMMENT '–î–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏',
        admin_notes TEXT NULL COMMENT '–ó–∞–º–µ—Ç–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
        
        FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
        FOREIGN KEY (processed_by) REFERENCES users(id) ON DELETE SET NULL,
        
        INDEX idx_order_number (order_number),
        INDEX idx_user_id (user_id),
        INDEX idx_employee_id (employee_id),
        INDEX idx_status (status),
        INDEX idx_departure_date (departure_date),
        INDEX idx_created_at (created_at)
      ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='–ó–∞—è–≤–∫–∏ –Ω–∞ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã'
    `);
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ flight_orders –≥–æ—Ç–æ–≤–∞');

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∑–∞—è–≤–æ–∫ –Ω–∞ –æ—Ç–µ–ª–∏
    console.log('üè® –°–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã hotel_orders...');
    await connection.execute(`
      CREATE TABLE IF NOT EXISTS hotel_orders (
        id VARCHAR(36) PRIMARY KEY DEFAULT (UUID()),
        order_number VARCHAR(50) UNIQUE NOT NULL COMMENT '–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏',
        user_id VARCHAR(36) NOT NULL COMMENT 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        employee_id VARCHAR(50) NOT NULL COMMENT '–¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä',
        full_name VARCHAR(255) NOT NULL COMMENT '–§–ò–û',
        
        city VARCHAR(100) NOT NULL COMMENT '–ì–æ—Ä–æ–¥',
        check_in_date DATE NOT NULL COMMENT '–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞',
        check_in_time TIME NOT NULL COMMENT '–í—Ä–µ–º—è –∑–∞–µ–∑–¥–∞',
        check_out_date DATE NOT NULL COMMENT '–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞',
        check_out_time TIME NOT NULL COMMENT '–í—Ä–µ–º—è –≤—ã–µ–∑–¥–∞',
        flight_date DATE NULL COMMENT '–î–∞—Ç–∞ —Ä–µ–π—Å–∞',
        flight_number VARCHAR(20) NULL COMMENT '–ù–æ–º–µ—Ä —Ä–µ–π—Å–∞',
        
        status ENUM('NEW', 'PROCESSING', 'CONFIRMED', 'REJECTED', 'COMPLETED', 'CANCELLED') DEFAULT 'NEW' COMMENT '–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏',
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP COMMENT '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è',
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è',
        processed_by VARCHAR(36) NULL COMMENT 'ID –æ–±—Ä–∞–±–æ—Ç–∞–≤—à–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
        processed_at TIMESTAMP NULL COMMENT '–î–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏',
        admin_notes TEXT NULL COMMENT '–ó–∞–º–µ—Ç–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
        
        FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
        FOREIGN KEY (processed_by) REFERENCES users(id) ON DELETE SET NULL,
        
        INDEX idx_order_number (order_number),
        INDEX idx_user_id (user_id),
        INDEX idx_employee_id (employee_id),
        INDEX idx_status (status),
        INDEX idx_check_in_date (check_in_date),
        INDEX idx_created_at (created_at)
      ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='–ó–∞—è–≤–∫–∏ –Ω–∞ –æ—Ç–µ–ª–∏'
    `);
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ hotel_orders –≥–æ—Ç–æ–≤–∞');

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è...');
    const [finalTables] = await connection.execute('SHOW TABLES');
    console.log('üìã –¢–∞–±–ª–∏—Ü—ã –≤ –ø—Ä–æ–¥–∞–∫—à–Ω –ë–î:');
    finalTables.forEach(table => {
      console.log(`   - ${Object.values(table)[0]}`);
    });

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const [userStats] = await connection.execute(`
      SELECT 
        COUNT(*) as total_users,
        COUNT(CASE WHEN is_active = TRUE THEN 1 END) as active_users,
        COUNT(CASE WHEN is_active = FALSE THEN 1 END) as inactive_users
      FROM users
    `);
    
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
    console.log(`   –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userStats[0].total_users}`);
    console.log(`   –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${userStats[0].active_users}`);
    console.log(`   –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: ${userStats[0].inactive_users}`);

    console.log('üéâ –î–µ–ø–ª–æ–π –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω:', error.message);
    process.exit(1);
  } finally {
    if (connection) {
      await connection.end();
      console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
    }
  }
}

// –ó–∞–ø—É—Å–∫ –¥–µ–ø–ª–æ—è
if (require.main === module) {
  deployToProduction()
    .then(() => {
      console.log('‚ú® –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}

module.exports = { deployToProduction };
