#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ CrewLife
"""

import time
import json
import logging
import requests
import subprocess
import psutil
from datetime import datetime, timedelta
from typing import Dict, List, Optional
import os
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/var/log/crewlife-autoscaler.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


class AutoScaler:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self, config: Dict):
        self.config = config
        self.is_running = False
        self.scale_thread = None
        self.current_instances = 3  # –ù–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
        self.min_instances = config.get('min_instances', 2)
        self.max_instances = config.get('max_instances', 10)
        self.scale_up_threshold = config.get('scale_up_threshold', 70.0)  # CPU %
        self.scale_down_threshold = config.get('scale_down_threshold', 30.0)  # CPU %
        self.cooldown_period = config.get('cooldown_period', 300)  # 5 –º–∏–Ω—É—Ç
        self.last_scale_time = 0
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π
        self.metrics_history = []
        self.metrics_window = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        
    def start_scaling(self):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if self.is_running:
            logger.warning("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ")
            return
        
        self.is_running = True
        self.scale_thread = threading.Thread(target=self._scaling_loop, daemon=True)
        self.scale_thread.start()
        logger.info("üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")
    
    def stop_scaling(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.is_running = False
        if self.scale_thread:
            self.scale_thread.join(timeout=5)
        logger.info("üõë –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    def _scaling_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è"""
        while self.is_running:
            try:
                # –°–±–æ—Ä –º–µ—Ç—Ä–∏–∫
                metrics = self._collect_metrics()
                self._process_metrics(metrics)
                
                # –ê–Ω–∞–ª–∏–∑ –∏ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π
                decision = self._analyze_scaling_decision()
                
                if decision['action'] != 'none':
                    self._execute_scaling_decision(decision)
                
                # –ñ–¥–µ–º —Å–ª–µ–¥—É—é—â—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é
                time.sleep(self.config.get('check_interval', 60))
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
                time.sleep(30)
    
    def _collect_metrics(self) -> Dict:
        """–°–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π –æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        timestamp = datetime.now()
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        cpu_percent = psutil.cpu_percent(interval=1)
        memory = psutil.virtual_memory()
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
        app_metrics = self._get_app_metrics()
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_metrics = self._get_db_metrics()
        
        # –ú–µ—Ç—Ä–∏–∫–∏ —Å–µ—Ç–∏
        network_metrics = self._get_network_metrics()
        
        return {
            'timestamp': timestamp.isoformat(),
            'system': {
                'cpu_percent': cpu_percent,
                'memory_percent': memory.percent,
                'load_average': os.getloadavg()[0] if hasattr(os, 'getloadavg') else 0
            },
            'applications': app_metrics,
            'database': db_metrics,
            'network': network_metrics
        }
    
    def _get_app_metrics(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"""
        app_metrics = {
            'total_requests': 0,
            'active_connections': 0,
            'response_time_avg': 0,
            'error_rate': 0,
            'instances': []
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        for i in range(1, self.current_instances + 1):
            try:
                port = 5000 + i
                response = requests.get(f'http://localhost:{port}/api/stats', timeout=5)
                if response.status_code == 200:
                    stats = response.json()
                    app_metrics['total_requests'] += stats.get('total_requests', 0)
                    app_metrics['active_connections'] += stats.get('active_connections', 0)
                    app_metrics['response_time_avg'] += stats.get('response_time_avg', 0)
                    app_metrics['error_rate'] += stats.get('error_rate', 0)
                    
                    app_metrics['instances'].append({
                        'instance_id': i,
                        'port': port,
                        'status': 'healthy',
                        'stats': stats
                    })
                else:
                    app_metrics['instances'].append({
                        'instance_id': i,
                        'port': port,
                        'status': 'unhealthy',
                        'stats': {}
                    })
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ {i}: {e}")
                app_metrics['instances'].append({
                    'instance_id': i,
                    'port': port,
                    'status': 'error',
                    'error': str(e)
                })
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        healthy_instances = [inst for inst in app_metrics['instances'] if inst['status'] == 'healthy']
        if healthy_instances:
            app_metrics['response_time_avg'] /= len(healthy_instances)
            app_metrics['error_rate'] /= len(healthy_instances)
        
        return app_metrics
    
    def _get_db_metrics(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
            response = requests.get('http://localhost:5004/api/stats', timeout=5)
            if response.status_code == 200:
                return response.json()
            else:
                return {'error': 'Database metrics unavailable'}
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –ë–î: {e}")
            return {'error': str(e)}
    
    def _get_network_metrics(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ç–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫"""
        try:
            net_io = psutil.net_io_counters()
            return {
                'bytes_sent': net_io.bytes_sent,
                'bytes_recv': net_io.bytes_recv,
                'packets_sent': net_io.packets_sent,
                'packets_recv': net_io.packets_recv
            }
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Ç–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏: {e}")
            return {'error': str(e)}
    
    def _process_metrics(self, metrics: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫"""
        self.metrics_history.append(metrics)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        if len(self.metrics_history) > self.metrics_window:
            self.metrics_history = self.metrics_history[-self.metrics_window:]
    
    def _analyze_scaling_decision(self) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –º–µ—Ç—Ä–∏–∫ –∏ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è –æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        if len(self.metrics_history) < 3:
            return {'action': 'none', 'reason': 'Insufficient metrics history'}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown –ø–µ—Ä–∏–æ–¥
        current_time = time.time()
        if current_time - self.last_scale_time < self.cooldown_period:
            return {'action': 'none', 'reason': 'Cooldown period active'}
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        recent_metrics = self.metrics_history[-3:]
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        avg_cpu = sum(m['system']['cpu_percent'] for m in recent_metrics) / len(recent_metrics)
        avg_memory = sum(m['system']['memory_percent'] for m in recent_metrics) / len(recent_metrics)
        avg_response_time = sum(m['applications']['response_time_avg'] for m in recent_metrics) / len(recent_metrics)
        avg_error_rate = sum(m['applications']['error_rate'] for m in recent_metrics) / len(recent_metrics)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–¥–æ—Ä–æ–≤—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
        healthy_instances = sum(
            len([inst for inst in m['applications']['instances'] if inst['status'] == 'healthy'])
            for m in recent_metrics
        ) / len(recent_metrics)
        
        # –ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è –æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–∏
        decision = {'action': 'none', 'reason': 'No scaling needed'}
        
        # –£—Å–ª–æ–≤–∏—è –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –≤–≤–µ—Ä—Ö
        if (avg_cpu > self.scale_up_threshold or 
            avg_memory > 80 or 
            avg_response_time > 2000 or 
            avg_error_rate > 5 or
            healthy_instances < self.current_instances * 0.8):
            
            if self.current_instances < self.max_instances:
                decision = {
                    'action': 'scale_up',
                    'reason': f'High load: CPU={avg_cpu:.1f}%, Memory={avg_memory:.1f}%, Response={avg_response_time:.1f}ms',
                    'target_instances': min(self.current_instances + 1, self.max_instances)
                }
            else:
                decision = {
                    'action': 'none',
                    'reason': f'High load but already at max instances ({self.max_instances})'
                }
        
        # –£—Å–ª–æ–≤–∏—è –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –≤–Ω–∏–∑
        elif (avg_cpu < self.scale_down_threshold and 
              avg_memory < 50 and 
              avg_response_time < 500 and 
              avg_error_rate < 1 and
              healthy_instances >= self.current_instances):
            
            if self.current_instances > self.min_instances:
                decision = {
                    'action': 'scale_down',
                    'reason': f'Low load: CPU={avg_cpu:.1f}%, Memory={avg_memory:.1f}%, Response={avg_response_time:.1f}ms',
                    'target_instances': max(self.current_instances - 1, self.min_instances)
                }
        
        return decision
    
    def _execute_scaling_decision(self, decision: Dict):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è –æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        action = decision['action']
        reason = decision['reason']
        
        logger.info(f"üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è –æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–∏: {action} - {reason}")
        
        if action == 'scale_up':
            self._scale_up(decision['target_instances'])
        elif action == 'scale_down':
            self._scale_down(decision['target_instances'])
        
        self.last_scale_time = time.time()
    
    def _scale_up(self, target_instances: int):
        """–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–≤–µ—Ä—Ö"""
        if target_instances <= self.current_instances:
            return
        
        logger.info(f"üìà –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–≤–µ—Ä—Ö: {self.current_instances} -> {target_instances}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã —á–µ—Ä–µ–∑ Docker Compose
        for i in range(self.current_instances + 1, target_instances + 1):
            try:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –≤ docker-compose
                self._add_docker_service(i)
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                subprocess.run([
                    'docker-compose', 'up', '-d', f'crewlife-app-{i}'
                ], check=True, capture_output=True)
                
                logger.info(f"‚úÖ –≠–∫–∑–µ–º–ø–ª—è—Ä {i} –∑–∞–ø—É—â–µ–Ω")
                
                # –ñ–¥–µ–º, –ø–æ–∫–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä —Å—Ç–∞–Ω–µ—Ç –∑–¥–æ—Ä–æ–≤—ã–º
                self._wait_for_healthy_instance(i)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ {i}: {e}")
        
        self.current_instances = target_instances
        logger.info(f"üéâ –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–≤–µ—Ä—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {target_instances} —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤")
    
    def _scale_down(self, target_instances: int):
        """–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–Ω–∏–∑"""
        if target_instances >= self.current_instances:
            return
        
        logger.info(f"üìâ –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–Ω–∏–∑: {self.current_instances} -> {target_instances}")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏
        for i in range(self.current_instances, target_instances, -1):
            try:
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                subprocess.run([
                    'docker-compose', 'stop', f'crewlife-app-{i}'
                ], check=True, capture_output=True)
                
                # –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                subprocess.run([
                    'docker-compose', 'rm', '-f', f'crewlife-app-{i}'
                ], check=True, capture_output=True)
                
                logger.info(f"‚úÖ –≠–∫–∑–µ–º–ø–ª—è—Ä {i} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ {i}: {e}")
        
        self.current_instances = target_instances
        logger.info(f"üéâ –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–Ω–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {target_instances} —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤")
    
    def _add_docker_service(self, instance_id: int):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –≤ docker-compose"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è docker-compose.yml
        # –ü–æ–∫–∞ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
        pass
    
    def _wait_for_healthy_instance(self, instance_id: int, timeout: int = 60):
        """–û–∂–∏–¥–∞–Ω–∏–µ, –ø–æ–∫–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä —Å—Ç–∞–Ω–µ—Ç –∑–¥–æ—Ä–æ–≤—ã–º"""
        port = 5000 + instance_id
        start_time = time.time()
        
        while time.time() - start_time < timeout:
            try:
                response = requests.get(f'http://localhost:{port}/api/health', timeout=5)
                if response.status_code == 200:
                    logger.info(f"‚úÖ –≠–∫–∑–µ–º–ø–ª—è—Ä {instance_id} —Å—Ç–∞–ª –∑–¥–æ—Ä–æ–≤—ã–º")
                    return True
            except Exception:
                pass
            
            time.sleep(5)
        
        logger.warning(f"‚ö†Ô∏è –≠–∫–∑–µ–º–ø–ª—è—Ä {instance_id} –Ω–µ —Å—Ç–∞–ª –∑–¥–æ—Ä–æ–≤—ã–º –≤ —Ç–µ—á–µ–Ω–∏–µ {timeout} —Å–µ–∫—É–Ω–¥")
        return False
    
    def get_scaling_status(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è"""
        return {
            'is_running': self.is_running,
            'current_instances': self.current_instances,
            'min_instances': self.min_instances,
            'max_instances': self.max_instances,
            'last_scale_time': self.last_scale_time,
            'cooldown_remaining': max(0, self.cooldown_period - (time.time() - self.last_scale_time)),
            'metrics_history_count': len(self.metrics_history)
        }


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    config = {
        'min_instances': 2,
        'max_instances': 10,
        'scale_up_threshold': 70.0,
        'scale_down_threshold': 30.0,
        'cooldown_period': 300,  # 5 –º–∏–Ω—É—Ç
        'check_interval': 60  # 1 –º–∏–Ω—É—Ç–∞
    }
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Å–∫–∞–ª–µ—Ä–∞
    scaler = AutoScaler(config)
    
    try:
        scaler.start_scaling()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        while True:
            time.sleep(60)
            
            # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            status = scaler.get_scaling_status()
            logger.info(f"üìä –°—Ç–∞—Ç—É—Å –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è: {status['current_instances']} —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤, "
                       f"Cooldown: {status['cooldown_remaining']:.0f}s")
            
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    finally:
        scaler.stop_scaling()


if __name__ == '__main__':
    import threading
    main()
