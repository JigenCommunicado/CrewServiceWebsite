#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è CrewLife
"""

import psutil
import subprocess
import json
import time
import os
from datetime import datetime

class SystemMonitor:
    def __init__(self):
        self.log_file = "/var/log/crewlife_monitor.log"
        self.alert_thresholds = {
            'cpu_percent': 80,
            'memory_percent': 85,
            'disk_percent': 90,
            'load_average': 2.0
        }
    
    def get_system_stats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        stats = {
            'timestamp': datetime.now().isoformat(),
            'cpu': {
                'percent': psutil.cpu_percent(interval=1),
                'count': psutil.cpu_count(),
                'load_avg': os.getloadavg() if hasattr(os, 'getloadavg') else [0, 0, 0]
            },
            'memory': {
                'total': psutil.virtual_memory().total,
                'available': psutil.virtual_memory().available,
                'percent': psutil.virtual_memory().percent,
                'used': psutil.virtual_memory().used
            },
            'disk': {
                'total': psutil.disk_usage('/').total,
                'used': psutil.disk_usage('/').used,
                'free': psutil.disk_usage('/').free,
                'percent': psutil.disk_usage('/').percent
            },
            'network': {
                'bytes_sent': psutil.net_io_counters().bytes_sent,
                'bytes_recv': psutil.net_io_counters().bytes_recv,
                'packets_sent': psutil.net_io_counters().packets_sent,
                'packets_recv': psutil.net_io_counters().packets_recv
            },
            'processes': {
                'total': len(psutil.pids()),
                'crewlife_processes': self.get_crewlife_processes()
            }
        }
        return stats
    
    def get_crewlife_processes(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ CrewLife"""
        crewlife_processes = []
        for proc in psutil.process_iter(['pid', 'name', 'cpu_percent', 'memory_percent', 'cmdline']):
            try:
                if any('crewlife' in str(cmd).lower() for cmd in proc.info['cmdline']):
                    crewlife_processes.append({
                        'pid': proc.info['pid'],
                        'name': proc.info['name'],
                        'cpu_percent': proc.info['cpu_percent'],
                        'memory_percent': proc.info['memory_percent'],
                        'cmdline': ' '.join(proc.info['cmdline'])
                    })
            except (psutil.NoSuchProcess, psutil.AccessDenied):
                continue
        return crewlife_processes
    
    def get_database_stats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
            result = subprocess.run([
                'mysql', '-u', 'crewlife_user', '-pandrei8002012', 'crewlife_prod',
                '-e', "SHOW STATUS LIKE 'Threads_connected'"
            ], capture_output=True, text=True)
            
            connections = 0
            if result.returncode == 0:
                lines = result.stdout.strip().split('\n')
                if len(lines) > 1:
                    connections = int(lines[1].split('\t')[1])
            
            # –†–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            result = subprocess.run([
                'mysql', '-u', 'crewlife_user', '-pandrei8002012', 'crewlife_prod',
                '-e', "SELECT ROUND(SUM(data_length + index_length) / 1024 / 1024, 2) AS 'DB Size in MB' FROM information_schema.tables WHERE table_schema = 'crewlife_prod'"
            ], capture_output=True, text=True)
            
            db_size = 0
            if result.returncode == 0:
                lines = result.stdout.strip().split('\n')
                if len(lines) > 1:
                    db_size = float(lines[1])
            
            return {
                'connections': connections,
                'size_mb': db_size,
                'status': 'online'
            }
        except Exception as e:
            return {
                'connections': 0,
                'size_mb': 0,
                'status': 'error',
                'error': str(e)
            }
    
    def check_alerts(self, stats):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"""
        alerts = []
        
        if stats['cpu']['percent'] > self.alert_thresholds['cpu_percent']:
            alerts.append(f"‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU: {stats['cpu']['percent']:.1f}%")
        
        if stats['memory']['percent'] > self.alert_thresholds['memory_percent']:
            alerts.append(f"‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {stats['memory']['percent']:.1f}%")
        
        if stats['disk']['percent'] > self.alert_thresholds['disk_percent']:
            alerts.append(f"‚ö†Ô∏è –ú–∞–ª–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ: {stats['disk']['percent']:.1f}%")
        
        if stats['cpu']['load_avg'][0] > self.alert_thresholds['load_average']:
            alerts.append(f"‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã: {stats['cpu']['load_avg'][0]:.2f}")
        
        return alerts
    
    def log_stats(self, stats, alerts):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        log_entry = {
            'timestamp': stats['timestamp'],
            'stats': stats,
            'alerts': alerts
        }
        
        try:
            with open(self.log_file, 'a') as f:
                f.write(json.dumps(log_entry) + '\n')
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥: {e}")
    
    def monitor_loop(self, interval=30):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        print("üîç –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ CrewLife")
        print("=" * 50)
        print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        print("=" * 50)
        
        try:
            while True:
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                stats = self.get_system_stats()
                db_stats = self.get_database_stats()
                stats['database'] = db_stats
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª–µ—Ä—Ç—ã
                alerts = self.check_alerts(stats)
                
                # –õ–æ–≥–∏—Ä—É–µ–º
                self.log_stats(stats, alerts)
                
                # –í—ã–≤–æ–¥–∏–º –Ω–∞ —ç–∫—Ä–∞–Ω
                self.print_stats(stats, alerts)
                
                time.sleep(interval)
                
        except KeyboardInterrupt:
            print("\n\nüõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def print_stats(self, stats, alerts):
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ —ç–∫—Ä–∞–Ω"""
        os.system('clear')
        
        print(f"üìä –°–ò–°–¢–ï–ú–ù–´–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("=" * 60)
        
        # CPU
        print(f"üñ•Ô∏è  CPU: {stats['cpu']['percent']:.1f}% (—è–¥–µ—Ä: {stats['cpu']['count']})")
        print(f"   –ù–∞–≥—Ä—É–∑–∫–∞: {stats['cpu']['load_avg'][0]:.2f} {stats['cpu']['load_avg'][1]:.2f} {stats['cpu']['load_avg'][2]:.2f}")
        
        # –ü–∞–º—è—Ç—å
        memory_gb = stats['memory']['total'] / (1024**3)
        memory_used_gb = stats['memory']['used'] / (1024**3)
        print(f"üíæ –ü–∞–º—è—Ç—å: {stats['memory']['percent']:.1f}% ({memory_used_gb:.1f}GB / {memory_gb:.1f}GB)")
        
        # –î–∏—Å–∫
        disk_gb = stats['disk']['total'] / (1024**3)
        disk_used_gb = stats['disk']['used'] / (1024**3)
        print(f"üíø –î–∏—Å–∫: {stats['disk']['percent']:.1f}% ({disk_used_gb:.1f}GB / {disk_gb:.1f}GB)")
        
        # –°–µ—Ç—å
        network_mb_sent = stats['network']['bytes_sent'] / (1024**2)
        network_mb_recv = stats['network']['bytes_recv'] / (1024**2)
        print(f"üåê –°–µ—Ç—å: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {network_mb_sent:.1f}MB, –ü–æ–ª—É—á–µ–Ω–æ {network_mb_recv:.1f}MB")
        
        # –ü—Ä–æ—Ü–µ—Å—Å—ã
        print(f"‚öôÔ∏è  –ü—Ä–æ—Ü–µ—Å—Å—ã: {stats['processes']['total']} (CrewLife: {len(stats['processes']['crewlife_processes'])})")
        
        # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        if stats['database']['status'] == 'online':
            print(f"üóÑÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {stats['database']['connections']} –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π, {stats['database']['size_mb']:.1f}MB")
        else:
            print(f"üóÑÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ‚ùå –û—à–∏–±–∫–∞")
        
        # –ê–ª–µ—Ä—Ç—ã
        if alerts:
            print("\nüö® –ê–õ–ï–†–¢–´:")
            for alert in alerts:
                print(f"   {alert}")
        else:
            print("\n‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
        
        print("=" * 60)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    monitor = SystemMonitor()
    
    print("üîç –°–∏—Å—Ç–µ–º–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ CrewLife")
    print("=" * 40)
    print("1. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
    print("2. –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    print("3. –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤")
    print("=" * 40)
    
    choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (1-3): ").strip()
    
    if choice == "1":
        interval = input("–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30): ").strip()
        try:
            interval = int(interval) if interval else 30
        except ValueError:
            interval = 30
        monitor.monitor_loop(interval)
    
    elif choice == "2":
        stats = monitor.get_system_stats()
        db_stats = monitor.get_database_stats()
        stats['database'] = db_stats
        alerts = monitor.check_alerts(stats)
        monitor.print_stats(stats, alerts)
    
    elif choice == "3":
        if os.path.exists(monitor.log_file):
            print(f"\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ {monitor.log_file}:")
            print("=" * 50)
            with open(monitor.log_file, 'r') as f:
                lines = f.readlines()
                for line in lines[-10:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π
                    try:
                        data = json.loads(line.strip())
                        print(f"{data['timestamp']}: {len(data['alerts'])} –∞–ª–µ—Ä—Ç–æ–≤")
                    except:
                        print(line.strip())
        else:
            print("‚ùå –õ–æ–≥ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

if __name__ == "__main__":
    main()
