#!/usr/bin/env python3
"""
–ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è CrewLife
"""

import subprocess
import os
import shutil
import gzip
import json
from datetime import datetime, timedelta
import schedule
import time

class BackupManager:
    def __init__(self):
        self.backup_dir = "/root/CrewServiceWebsite/CrewServiceWebsite/CrewServiceWebsite/backups"
        self.retention_days = 30
        self.db_config = {
            'user': 'crewlife_user',
            'password': 'andrei8002012',
            'database': 'crewlife_prod'
        }
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±—ç–∫–∞–ø–æ–≤
        os.makedirs(self.backup_dir, exist_ok=True)
    
    def create_database_backup(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        backup_file = os.path.join(self.backup_dir, f"crewlife_db_{timestamp}.sql")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∞–º–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            cmd = [
                'mysqldump',
                '-u', self.db_config['user'],
                f'-p{self.db_config["password"]}',
                '--single-transaction',
                '--routines',
                '--triggers',
                self.db_config['database']
            ]
            
            with open(backup_file, 'w') as f:
                result = subprocess.run(cmd, stdout=f, stderr=subprocess.PIPE, text=True)
            
            if result.returncode == 0:
                # –°–∂–∏–º–∞–µ–º —Ñ–∞–π–ª
                compressed_file = f"{backup_file}.gz"
                with open(backup_file, 'rb') as f_in:
                    with gzip.open(compressed_file, 'wb') as f_out:
                        shutil.copyfileobj(f_in, f_out)
                
                # –£–¥–∞–ª—è–µ–º –Ω–µ—Å–∂–∞—Ç—ã–π —Ñ–∞–π–ª
                os.remove(backup_file)
                
                print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –ë–î —Å–æ–∑–¥–∞–Ω–∞: {compressed_file}")
                return compressed_file
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ë–î: {result.stderr}")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ë–î: {e}")
            return None
    
    def create_files_backup(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        backup_file = os.path.join(self.backup_dir, f"crewlife_files_{timestamp}.tar.gz")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤ —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            app_dir = "/root/CrewServiceWebsite/CrewServiceWebsite/CrewServiceWebsite"
            cmd = [
                'tar',
                '-czf',
                backup_file,
                '-C',
                os.path.dirname(app_dir),
                '--exclude=backups',
                '--exclude=.git',
                '--exclude=__pycache__',
                '--exclude=*.pyc',
                os.path.basename(app_dir)
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            if result.returncode == 0:
                print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Ñ–∞–π–ª–æ–≤ —Å–æ–∑–¥–∞–Ω–∞: {backup_file}")
                return backup_file
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Ñ–∞–π–ª–æ–≤: {result.stderr}")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Ñ–∞–π–ª–æ–≤: {e}")
            return None
    
    def create_full_backup(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        print(f"üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏
        db_backup = self.create_database_backup()
        files_backup = self.create_files_backup()
        
        # –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        metadata = {
            'timestamp': datetime.now().isoformat(),
            'database_backup': db_backup,
            'files_backup': files_backup,
            'size': {
                'database': os.path.getsize(db_backup) if db_backup and os.path.exists(db_backup) else 0,
                'files': os.path.getsize(files_backup) if files_backup and os.path.exists(files_backup) else 0
            }
        }
        
        metadata_file = os.path.join(self.backup_dir, f"backup_metadata_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json")
        with open(metadata_file, 'w') as f:
            json.dump(metadata, f, indent=2)
        
        total_size = metadata['size']['database'] + metadata['size']['files']
        print(f"üéâ –ü–æ–ª–Ω–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ (—Ä–∞–∑–º–µ—Ä: {total_size / (1024*1024):.1f} MB)")
        
        return metadata
    
    def cleanup_old_backups(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π"""
        print("üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π...")
        
        cutoff_date = datetime.now() - timedelta(days=self.retention_days)
        deleted_count = 0
        
        try:
            for filename in os.listdir(self.backup_dir):
                file_path = os.path.join(self.backup_dir, filename)
                
                if os.path.isfile(file_path):
                    file_time = datetime.fromtimestamp(os.path.getmtime(file_path))
                    
                    if file_time < cutoff_date:
                        os.remove(file_path)
                        deleted_count += 1
                        print(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: {filename}")
            
            print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
    
    def list_backups(self):
        """–°–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π"""
        print("üìã –°–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π:")
        print("=" * 60)
        
        backups = []
        for filename in os.listdir(self.backup_dir):
            if filename.endswith('.json'):
                file_path = os.path.join(self.backup_dir, filename)
                try:
                    with open(file_path, 'r') as f:
                        metadata = json.load(f)
                    backups.append(metadata)
                except:
                    continue
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è
        backups.sort(key=lambda x: x['timestamp'], reverse=True)
        
        for i, backup in enumerate(backups[:10]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
            timestamp = datetime.fromisoformat(backup['timestamp'])
            total_size = backup['size']['database'] + backup['size']['files']
            
            print(f"{i+1:2d}. {timestamp.strftime('%Y-%m-%d %H:%M:%S')}")
            print(f"    –†–∞–∑–º–µ—Ä: {total_size / (1024*1024):.1f} MB")
            print(f"    –ë–î: {os.path.basename(backup['database_backup'])}")
            print(f"    –§–∞–π–ª—ã: {os.path.basename(backup['files_backup'])}")
            print()
    
    def restore_database(self, backup_file):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        if not os.path.exists(backup_file):
            print(f"‚ùå –§–∞–π–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {backup_file}")
            return False
        
        try:
            print(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ {backup_file}...")
            
            # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if backup_file.endswith('.gz'):
                temp_file = backup_file.replace('.gz', '_temp.sql')
                with gzip.open(backup_file, 'rb') as f_in:
                    with open(temp_file, 'wb') as f_out:
                        shutil.copyfileobj(f_in, f_out)
                restore_file = temp_file
            else:
                restore_file = backup_file
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            cmd = [
                'mysql',
                '-u', self.db_config['user'],
                f'-p{self.db_config["password"]}',
                self.db_config['database']
            ]
            
            with open(restore_file, 'r') as f:
                result = subprocess.run(cmd, stdin=f, capture_output=True, text=True)
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if backup_file.endswith('.gz'):
                os.remove(restore_file)
            
            if result.returncode == 0:
                print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {result.stderr}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            return False
    
    def setup_automatic_backups(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π"""
        print("‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π...")
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏
        schedule.every().day.at("02:00").do(self.create_full_backup)
        schedule.every().day.at("14:00").do(self.cleanup_old_backups)
        
        # –°–æ–∑–¥–∞–µ–º cron –∑–∞–¥–∞—á—É
        cron_script = f"""#!/bin/bash
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ CrewLife
cd /root/CrewServiceWebsite/CrewServiceWebsite/CrewServiceWebsite
python3 backup_manager.py --auto-backup
"""
        
        cron_file = "/etc/cron.d/crewlife-backup"
        with open(cron_file, 'w') as f:
            f.write("0 2 * * * root /root/CrewServiceWebsite/CrewServiceWebsite/CrewServiceWebsite/backup_manager.py --auto-backup\n")
            f.write("0 14 * * * root /root/CrewServiceWebsite/CrewServiceWebsite/CrewServiceWebsite/backup_manager.py --cleanup\n")
        
        print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        print("   - –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 02:00 - —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
        print("   - –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 14:00 - –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–ø–∏–π")
    
    def run_automatic_backup(self):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        self.create_full_backup()
        self.cleanup_old_backups()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import sys
    
    backup_manager = BackupManager()
    
    if len(sys.argv) > 1:
        if sys.argv[1] == '--auto-backup':
            backup_manager.run_automatic_backup()
            return
        elif sys.argv[1] == '--cleanup':
            backup_manager.cleanup_old_backups()
            return
    
    print("üíæ –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è CrewLife")
    print("=" * 50)
    print("1. –°–æ–∑–¥–∞—Ç—å –ø–æ–ª–Ω—É—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é")
    print("2. –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ë–î")
    print("3. –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ñ–∞–π–ª–æ–≤")
    print("4. –°–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π")
    print("5. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    print("6. –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∫–æ–ø–∏–∏")
    print("7. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–ø–∏–∏")
    print("=" * 50)
    
    choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (1-7): ").strip()
    
    if choice == "1":
        backup_manager.create_full_backup()
    elif choice == "2":
        backup_manager.create_database_backup()
    elif choice == "3":
        backup_manager.create_files_backup()
    elif choice == "4":
        backup_manager.list_backups()
    elif choice == "5":
        backup_file = input("–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: ").strip()
        backup_manager.restore_database(backup_file)
    elif choice == "6":
        backup_manager.cleanup_old_backups()
    elif choice == "7":
        backup_manager.setup_automatic_backups()
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

if __name__ == "__main__":
    main()
