#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ –∫–ª–∞—Å—Ç–µ—Ä–∞ CrewLife

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${BLUE}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
    exit 1
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
    if ! command -v docker &> /dev/null; then
        error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose
    if ! command -v docker-compose &> /dev/null; then
        error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python
    if ! command -v python3 &> /dev/null; then
        error "Python3 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
    
    success "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
create_directories() {
    log "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."
    
    directories=(
        "logs"
        "backups"
        "reports"
        "data"
        "docker/ssl"
        "docker/prometheus"
        "docker/grafana/provisioning"
    )
    
    for dir in "${directories[@]}"; do
        mkdir -p "$dir"
        success "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞: $dir"
    done
}

# –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞
create_env_file() {
    log "‚öôÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞..."
    
    if [ ! -f ".env" ]; then
        cat > .env << EOF
# CrewLife Production Environment

# Database Configuration
DB_TYPE=mysql
DB_HOST=mariadb
DB_PORT=3306
DB_NAME=crewlife_prod
DB_USER=crewlife_user
DB_PASSWORD=andrei8002012
DB_ROOT_PASSWORD=root_password

# Redis Configuration
REDIS_HOST=redis
REDIS_PORT=6379
REDIS_PASSWORD=redis_password

# Application Configuration
FLASK_ENV=production
SECRET_KEY=$(openssl rand -hex 32)

# Monitoring Configuration
GRAFANA_PASSWORD=admin123

# SSL Configuration
SSL_CERT_PATH=/etc/nginx/ssl/cert.pem
SSL_KEY_PATH=/etc/nginx/ssl/key.pem
EOF
        success ".env —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω"
    else
        warning ".env —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ (—Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
create_ssl_certificates() {
    log "üîê –°–æ–∑–¥–∞–Ω–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤..."
    
    if [ ! -f "docker/ssl/cert.pem" ] || [ ! -f "docker/ssl/key.pem" ]; then
        openssl req -x509 -newkey rsa:4096 -keyout docker/ssl/key.pem -out docker/ssl/cert.pem -days 365 -nodes -subj "/C=RU/ST=Moscow/L=Moscow/O=CrewLife/CN=localhost"
        success "SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —Å–æ–∑–¥–∞–Ω—ã"
    else
        warning "SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç"
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Prometheus
create_prometheus_config() {
    log "üìä –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Prometheus..."
    
    cat > docker/prometheus/prometheus.yml << EOF
global:
  scrape_interval: 15s
  evaluation_interval: 15s

rule_files:
  # - "first_rules.yml"
  # - "second_rules.yml"

scrape_configs:
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']

  - job_name: 'crewlife-apps'
    static_configs:
      - targets: ['crewlife-app-1:5000', 'crewlife-app-2:5000', 'crewlife-app-3:5000']
    metrics_path: '/metrics'
    scrape_interval: 30s

  - job_name: 'crewlife-monitor'
    static_configs:
      - targets: ['crewlife-web-monitor:5001']
    metrics_path: '/metrics'
    scrape_interval: 30s

  - job_name: 'nginx'
    static_configs:
      - targets: ['nginx:9113']
    scrape_interval: 30s
EOF
    success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Prometheus —Å–æ–∑–¥–∞–Ω–∞"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Grafana
create_grafana_config() {
    log "üìà –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Grafana..."
    
    # –°–æ–∑–¥–∞–Ω–∏–µ datasource
    mkdir -p docker/grafana/provisioning/datasources
    cat > docker/grafana/provisioning/datasources/prometheus.yml << EOF
apiVersion: 1

datasources:
  - name: Prometheus
    type: prometheus
    access: proxy
    url: http://prometheus:9090
    isDefault: true
EOF

    # –°–æ–∑–¥–∞–Ω–∏–µ dashboard
    mkdir -p docker/grafana/provisioning/dashboards
    cat > docker/grafana/provisioning/dashboards/dashboard.yml << EOF
apiVersion: 1

providers:
  - name: 'default'
    orgId: 1
    folder: ''
    type: file
    disableDeletion: false
    updateIntervalSeconds: 10
    allowUiUpdates: true
    options:
      path: /var/lib/grafana/dashboards
EOF
    success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Grafana —Å–æ–∑–¥–∞–Ω–∞"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
create_monitoring_password() {
    log "üîë –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞..."
    
    if [ ! -f "docker/nginx/.htpasswd" ]; then
        echo "admin:\$(openssl passwd -apr1 admin123)" > docker/nginx/.htpasswd
        success "–ü–∞—Ä–æ–ª—å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–∑–¥–∞–Ω (admin/admin123)"
    else
        warning "–ü–∞—Ä–æ–ª—å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    fi
}

# –ó–∞–ø—É—Å–∫ –∫–ª–∞—Å—Ç–µ—Ä–∞
start_cluster() {
    log "üöÄ –ó–∞–ø—É—Å–∫ –∫–ª–∞—Å—Ç–µ—Ä–∞ CrewLife..."
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    docker-compose down 2>/dev/null || true
    
    # –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤
    log "üèóÔ∏è –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤..."
    docker-compose build --no-cache
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
    log "üîÑ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    docker-compose up -d
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
    log "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    sleep 30
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
    check_services_health
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤
check_services_health() {
    log "üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    services=(
        "mariadb:3306"
        "redis:6379"
        "crewlife-app-1:5001"
        "crewlife-app-2:5002"
        "crewlife-app-3:5003"
        "nginx:80"
        "crewlife-web-monitor:5004"
        "prometheus:9090"
        "grafana:3000"
    )
    
    for service in "${services[@]}"; do
        name=$(echo $service | cut -d: -f1)
        port=$(echo $service | cut -d: -f2)
        
        if docker-compose ps | grep -q "$name.*Up"; then
            success "‚úÖ $name –∑–∞–ø—É—â–µ–Ω"
        else
            error "‚ùå $name –Ω–µ –∑–∞–ø—É—â–µ–Ω"
        fi
    done
}

# –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–µ
show_access_info() {
    log "üåê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–µ:"
    echo ""
    echo "üì± –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:"
    echo "   HTTP:  http://localhost"
    echo "   HTTPS: https://localhost"
    echo ""
    echo "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:"
    echo "   –í–µ–±-–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ë–î: http://localhost:5004"
    echo "   Prometheus:        http://localhost:9090"
    echo "   Grafana:           http://localhost:3000 (admin/admin123)"
    echo ""
    echo "üîß API Endpoints:"
    echo "   Health Check:      http://localhost/health"
    echo "   API Stats:         http://localhost/api/stats"
    echo "   Monitor API:       http://localhost:5004/api/stats"
    echo ""
    echo "üìã –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
    echo "   –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:   docker-compose ps"
    echo "   –õ–æ–≥–∏:              docker-compose logs -f"
    echo "   –û—Å—Ç–∞–Ω–æ–≤–∫–∞:         docker-compose down"
    echo "   –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫:        docker-compose restart"
    echo ""
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    log "üöÄ –ó–∞–ø—É—Å–∫ –∫–ª–∞—Å—Ç–µ—Ä–∞ CrewLife"
    
    check_dependencies
    create_directories
    create_env_file
    create_ssl_certificates
    create_prometheus_config
    create_grafana_config
    create_monitoring_password
    start_cluster
    show_access_info
    
    success "üéâ –ö–ª–∞—Å—Ç–µ—Ä CrewLife —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!"
    log "–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
case "${1:-start}" in
    start)
        main
        ;;
    stop)
        log "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª–∞—Å—Ç–µ—Ä–∞..."
        docker-compose down
        success "–ö–ª–∞—Å—Ç–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        ;;
    restart)
        log "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–ª–∞—Å—Ç–µ—Ä–∞..."
        docker-compose restart
        success "–ö–ª–∞—Å—Ç–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω"
        ;;
    status)
        log "üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:"
        docker-compose ps
        ;;
    logs)
        docker-compose logs -f
        ;;
    scale)
        instances=${2:-3}
        log "üìà –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ $instances —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤..."
        docker-compose up -d --scale crewlife-app=$instances
        success "–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
        ;;
    *)
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 {start|stop|restart|status|logs|scale [instances]}"
        exit 1
        ;;
esac
